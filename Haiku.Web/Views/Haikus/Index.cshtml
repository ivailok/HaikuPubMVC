@model Haiku.Web.ViewModels.HaikusListViewModel
@using PagedList.Mvc;
@section styles {
    @Styles.Render("~/Content/PagedList.css")
    @Styles.Render("~/Content/bootstrap-select.min.css")
    @Styles.Render("~/Content/rateit.css")
    @Styles.Render("~/Content/haikus.min.css")
}

@{
    ViewBag.Title = "Haikus";

    Haiku.DTO.SessionDto session = null;
    try
    {
        session = (Haiku.DTO.SessionDto)Session[Haiku.Services.SessionsService.SessionTokenLabelConst];
    }
    catch
    {

    }
}

<br />

@using (Html.BeginForm("Index", "Haikus", FormMethod.Get))
{
    <div class="form-horizontal">
        <div class="form-group">
            @Html.LabelFor(model => model.QueryParams.SortBy, "Sort by:", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("SortBy", Model.SortOptions, new { @class = "selectpicker", @data_style = "btn-primary" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.QueryParams.Order, "Order:", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Order", Model.OrderOptions, new { @class = "selectpicker", @data_style = "btn-primary" })
            </div>
        </div>

        @Html.Hidden("Skip", 0)
        @Html.Hidden("Take", 20)

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Apply" class="btn btn-primary" id="apply-button" />
            </div>
        </div>
    </div>
}

<div class="haikus-container container-fluid">
    @foreach (var haiku in Model.Haikus)
    {
        <div class="haikus-container-item">
            <div class="first-panel">
                @Html.TextAreaFor(modelItem => haiku.Text, htmlAttributes: new { @disabled = "disabled" })

                @if (session != null && haiku.Author == session.Nickname)
                {
                    @Html.ActionLink("Delete", "Delete", "Haikus", new { id = haiku.Id }, new { @class = "btn btn-danger side-btn" })
                    @Html.ActionLink("Edit", "Edit", "Haikus", new { id = haiku.Id }, new { @class = "btn btn-primary side-btn" })
                }

                @Html.ActionLink("Details", "Details", "Haikus", new { id = haiku.Id }, new { @class = "btn btn-primary side-btn" })
            </div>
            <span class="second-panel">
                @Html.DisplayFor(modelItem => haiku.Author)
                <span class="text-danger">
                    @{var rating = string.Format(System.Globalization.CultureInfo.GetCultureInfo("en-US"), "{0:0.00}", haiku.Rating); }
                    <span class="rating-stars">
                        <span class="rateit" id="rating" data-rateit-value="@rating" data-rateit-max="5" data-rateit-step="0.01" data-rateit-resetable="false" data-rateit-readonly="true"></span>
                    </span>
                    <span class="rating-numeric">@Html.DisplayFor(modelItem => rating)</span>
                </span>
            </span>
        </div>

        <div class="divider"></div>
    }
</div>

@if (Model.Haikus.PageCount != 0)
{
    @:Page @Model.Haikus.PageNumber of @Model.Haikus.PageCount
}
@Html.PagedListPager(Model.Haikus, page => Url.Action("Index",
    new { SortBy = Model.QueryParams.SortBy, Order = Model.QueryParams.Order, Skip = (page - 1) * Model.QueryParams.Take, Take = Model.QueryParams.Take }))

@section scripts
{
    @Scripts.Render("~/Scripts/bootstrap-select.min.js")
    <script>
        $(document).ready(function () {
            $('.selectpicker').selectpicker();
        });
    </script>
    @Scripts.Render("~/Scripts/jquery.rateit.min.js")
    @Scripts.Render("~/Scripts/rating.js") 
}